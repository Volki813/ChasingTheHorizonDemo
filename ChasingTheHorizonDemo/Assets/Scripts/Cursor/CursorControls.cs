//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Cursor/CursorControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CursorControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CursorControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CursorControls"",
    ""maps"": [
        {
            ""name"": ""MapScene"",
            ""id"": ""2b0a3f65-c43c-474c-b5b8-28163c689ff1"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""384f9d49-01ab-4932-9dba-fab40ca724e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""e332e716-71be-4c95-8645-24e55f64e9e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2f4373d2-fa84-4d1f-bb1d-1ca590fdc391"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""755288dd-d0ab-44e0-82a7-0f8cf5dff3b0"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90c08637-f56d-4b53-a488-7dd140624290"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""005bc2d1-4292-4239-ad36-9443513eab7b"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ad537df-8390-4877-90fa-5d989d08c18f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""818de9b2-8542-437f-b874-88ffba113b32"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fa62c688-2693-4d35-a96d-ae92e5bdea84"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""22746993-48e3-4256-9572-f347428b4f35"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fdfa3ee0-2ab0-4ba4-82bb-e9f84e97987a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3630acee-b2a7-4c96-93b2-2eb6e950543a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""5eaddde8-f226-4128-ae77-05b14aaa47ac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ffa9e72a-af89-4b8a-8bf4-76ddf90c5631"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8942db7f-ed5a-446d-a376-6315488f1dc3"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ed894052-d8a9-4ab9-9fa1-dca610171139"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5aa09327-3946-4709-bc6d-473dde986949"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Guitar"",
                    ""id"": ""8750c1eb-2cd8-49b8-a3f4-391b83e199e5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bf0c1b25-37bb-4540-b7e1-c12d1d53a7d5"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""223b072b-9c76-4e53-96ee-61ff5e56c0f9"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7153e377-7af0-448e-a1a8-afdc1f28ac0f"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e3006de9-a7e9-4454-a2e5-dd301fc73251"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""22f2b8c8-5dcf-4bfa-8e76-4fa5c53ff6cd"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e543d704-cc7a-4104-be86-0b67c14ff237"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""25662e87-dac9-48a3-8eb3-4f4155f39b05"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""fdb22245-061f-4bfe-9f39-e5b7f7088790"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""66c391df-8b09-4f06-a21c-dff4fd67fd11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""42036fd2-c85f-49b7-8c8f-eb80105dddb7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c79bfbfe-05d6-4b4b-92a6-bdd24d517f5d"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e33ffe3d-a717-4877-9343-3f16034ade5b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a957e907-9c1f-4fa5-941d-fe5180b5eb94"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a57989c-e2da-4637-bff6-8a6f609a782b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""06349d3e-4e37-470e-8d96-dea2b7343130"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba7a066b-7a3b-4cbc-b151-d5334654f561"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eb64e129-1cb9-4377-b89f-5a0e2e81423e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8850fef8-c448-42c8-af68-9de31023206b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""53f230c1-6f89-46ca-b0cd-5a848e823e7a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""e44d4598-1935-4922-96f1-8a7fd77e4e76"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""056086e1-dbcd-42d8-a571-20059469a5c2"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f69daa32-4b40-405f-abf3-5953aeafef75"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9f77a968-b7b2-47f8-a88e-1aeb3447c78f"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3601e3fa-2a9b-4f7e-871b-669c36769fca"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Guitar"",
                    ""id"": ""100cb56c-155b-4aba-8df1-f75dd39b2c69"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e618b1b-818c-4e9e-b19f-a68b85ae66b1"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""382c69bf-4e4c-47bd-a78c-fca04b232af0"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fd2dd038-e49b-46d4-8538-e237b2305261"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a85ac22f-56cb-4174-8082-a6fb9fa5bf89"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fab4b746-6db7-455c-a799-0892b044ae7c"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3abb43f6-d791-49a3-ac6c-11fadc227935"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""711509a0-537b-489e-aa1e-f3f55b05751b"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4984093a-a8b3-4422-87ab-8d933b47c52d"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Guitar"",
                    ""id"": ""1e2299a3-dd82-4093-bd90-bc79559e259e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""38dfef0e-9b45-47d0-b661-d01479119955"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3b631e7e-d46a-412e-806a-61b972295f1a"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9acc66b8-92b8-46ba-8f05-615ded59a46c"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a82a1dfe-2625-49b3-a226-13c66df65481"",
                    ""path"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Guitar"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Disabled"",
            ""id"": ""b0165dd2-ec75-4712-af5a-9dd1d1c330b3"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""d7049ed5-b41d-468c-b63b-080e1364f980"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2806a4ba-8944-4c44-b8c5-96a0b7be4f76"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Guitar"",
            ""bindingGroup"": ""Guitar"",
            ""devices"": [
                {
                    ""devicePath"": ""<HID::Licensed by Sony Computer Entertainment Guitar Hero5 for PlayStation (R) 3>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MapScene
        m_MapScene = asset.FindActionMap("MapScene", throwIfNotFound: true);
        m_MapScene_Confirm = m_MapScene.FindAction("Confirm", throwIfNotFound: true);
        m_MapScene_Cancel = m_MapScene.FindAction("Cancel", throwIfNotFound: true);
        m_MapScene_Movement = m_MapScene.FindAction("Movement", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Confirm = m_UI.FindAction("Confirm", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        // Disabled
        m_Disabled = asset.FindActionMap("Disabled", throwIfNotFound: true);
        m_Disabled_Newaction = m_Disabled.FindAction("New action", throwIfNotFound: true);
    }

    ~@CursorControls()
    {
        UnityEngine.Debug.Assert(!m_MapScene.enabled, "This will cause a leak and performance issues, CursorControls.MapScene.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, CursorControls.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Disabled.enabled, "This will cause a leak and performance issues, CursorControls.Disabled.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MapScene
    private readonly InputActionMap m_MapScene;
    private List<IMapSceneActions> m_MapSceneActionsCallbackInterfaces = new List<IMapSceneActions>();
    private readonly InputAction m_MapScene_Confirm;
    private readonly InputAction m_MapScene_Cancel;
    private readonly InputAction m_MapScene_Movement;
    public struct MapSceneActions
    {
        private @CursorControls m_Wrapper;
        public MapSceneActions(@CursorControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_MapScene_Confirm;
        public InputAction @Cancel => m_Wrapper.m_MapScene_Cancel;
        public InputAction @Movement => m_Wrapper.m_MapScene_Movement;
        public InputActionMap Get() { return m_Wrapper.m_MapScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapSceneActions set) { return set.Get(); }
        public void AddCallbacks(IMapSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_MapSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapSceneActionsCallbackInterfaces.Add(instance);
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMapSceneActions instance)
        {
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMapSceneActions instance)
        {
            if (m_Wrapper.m_MapSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_MapSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapSceneActions @MapScene => new MapSceneActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Confirm;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_Navigate;
    public struct UIActions
    {
        private @CursorControls m_Wrapper;
        public UIActions(@CursorControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_UI_Confirm;
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Disabled
    private readonly InputActionMap m_Disabled;
    private List<IDisabledActions> m_DisabledActionsCallbackInterfaces = new List<IDisabledActions>();
    private readonly InputAction m_Disabled_Newaction;
    public struct DisabledActions
    {
        private @CursorControls m_Wrapper;
        public DisabledActions(@CursorControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Disabled_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Disabled; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DisabledActions set) { return set.Get(); }
        public void AddCallbacks(IDisabledActions instance)
        {
            if (instance == null || m_Wrapper.m_DisabledActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DisabledActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IDisabledActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IDisabledActions instance)
        {
            if (m_Wrapper.m_DisabledActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDisabledActions instance)
        {
            foreach (var item in m_Wrapper.m_DisabledActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DisabledActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DisabledActions @Disabled => new DisabledActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_GuitarSchemeIndex = -1;
    public InputControlScheme GuitarScheme
    {
        get
        {
            if (m_GuitarSchemeIndex == -1) m_GuitarSchemeIndex = asset.FindControlSchemeIndex("Guitar");
            return asset.controlSchemes[m_GuitarSchemeIndex];
        }
    }
    public interface IMapSceneActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnNavigate(InputAction.CallbackContext context);
    }
    public interface IDisabledActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
